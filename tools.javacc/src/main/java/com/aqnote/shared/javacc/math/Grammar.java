/*
 * Copyright (C) 2013-2016 aqnote.com<aqnote.com@gmail.com>.
 * This library is free software; you can redistribute it and/or modify it under the terms of
 * the GNU Lesser General Public License as published by the Free Software Foundation;
 */
package com.aqnote.shared.javacc.math;
/* Generated By:JavaCC: Do not edit this line. Grammar.java */
/*解析代码的入口*/
@SuppressWarnings("static-access")
public class Grammar implements GrammarConstants {

        public static final int PlusOP=1;
        public static final int MinusOP=2;
        public static final int TimersOP=3;
        public static final int OverOP=4;

        public static void main(String args[]) throws ParseException {
        Grammar parser = new Grammar(System.in);
        parser.Expression();
        }

  static final public void Expression() throws ParseException {
        int value=0;
                System.out.print(">>>");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case NUM:
      case PLUS:
      case MINUS:
      case LPAREN:
      case NEWLINE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEWLINE:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(NEWLINE);
                                System.out.print(">>>"); /*在<NEWLINE>下的｛｝中为如果匹配到<NEWLINE>执行的java代码。*/

      }
      value = Simple_Expression();
      jj_consume_token(NEWLINE);
                System.out.println(value);
                System.out.print(">>>");/*在<NEWLINE>下的｛｝中为完成表达式解析，匹配到<NEWLINE>执行的java代码。*/

    }
    jj_consume_token(0);
  }

  @SuppressWarnings("unused")
static final public int Simple_Expression() throws ParseException {
        /* 这个｛｝中是Simple_Expression()的定义的局部变量*/
        int value;
        int tValue;
        int op;
    value = Term();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      op = addop();
      tValue = Term();
                        switch(op) {
                                case PlusOP:
                                        value=value+tValue;
                                        break;
                                case MinusOP:
                                        value=value - tValue;
                                        break;
                        }
    }
          {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unused")
static final public int addop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
                 {if (true) return PlusOP;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return MinusOP;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unused")
static final public int Term() throws ParseException {
        int value;
    int tValue;
    int op;
    value = Factor();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMERS:
      case OVER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      op = mulop();
      tValue = Factor();
                switch(op) {
                        case TimersOP:
                                value=value * tValue;
                                break;
                        case OverOP:
                                value=value / tValue;
                                break;
                        }
    }
        {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unused")
static final public int mulop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMERS:
      jj_consume_token(TIMERS);
                   {if (true) return TimersOP;}
      break;
    case OVER:
      jj_consume_token(OVER);
                 {if (true) return OverOP;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unused")
static final public int Factor() throws ParseException {
        int value;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                {
                  if("a".equals(t.image))
                  {
                        value=97;
                  }
                  else
                  {
                        value=100;
                  }
                }
        {if (true) return value;}
      break;
    case NUM:
      t = jj_consume_token(NUM);
       value= (Integer.valueOf(t.image)).intValue();
       {if (true) return value;}
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
       value=0-Factor();
       {if (true) return value;}
      break;
    case PLUS:
      t = jj_consume_token(PLUS);
       value=Factor();
       {if (true) return value;}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      value = Simple_Expression();
      jj_consume_token(RPAREN);
                {if (true) return value;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa78,0x800,0x60,0x60,0x180,0x180,0x278,};
   }

  /** Constructor with InputStream. */
  public Grammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Grammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Grammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Grammar(GrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[12];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 12; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
