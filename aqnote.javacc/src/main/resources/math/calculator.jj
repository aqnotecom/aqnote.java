/** calculator.jj */options{  STATIC = false;}PARSER_BEGIN(Calculator)package com.aqnote.shared.javacc.math.calculator;import java.io.InputStream;import java.io.PrintStream;public class Calculator{  double previousValue = 0.0;  public static void main(String [] args) throws ParseException, TokenMgrError, NumberFormatException  {    //    String value = "123+1-5";    //    InputStream is = new ByteArrayInputStream(value.getBytes());    Calculator cal = new Calculator(System.in);    cal._parse(System.out);  }}PARSER_END(Calculator)SKIP :{  " "}TOKEN :{  < EOL :    "\n"  | "\r"  | "\r\n" >}TOKEN :{  < PLUS : "+" >}TOKEN :{  < MINUS : "-" >}TOKEN :{  < TIMES : "*" >}TOKEN :{  < DIVIDE : "/" >}TOKEN :{  < OPEN_PAR : "(" >}TOKEN :{  < CLOSE_PAR : ")" >}TOKEN :{  < PREVIOUS : "$" >}TOKEN :{  < SUM : "sum" >}TOKEN :{  < MIDDLE : ".." >}TOKEN :{  < #DIGITS : ([ "0"-"9" ])+ >}TOKEN :{  < #DOT : "." >}TOKEN :{  < INTEGER : < DIGITS >>}TOKEN :{  < DOUBLE : < DIGITS > < DOT > < DIGITS >>}void _parse(PrintStream ps) throws NumberFormatException :{}{  (    previousValue = _expression()    (      < EOL >    | < EOF >    )    {      ps.println(previousValue);    }  )*  < EOF >}/** cal the expression and return the result */double _expression() throws NumberFormatException :{  double value;  double result;}{  result = _term()  (    < PLUS > value = _term()    {      result += value;    }  | < MINUS > value = _term()    {      result -= value;    }  )*  {    return result;  }}double _term() throws NumberFormatException :{  double value;  double result;}{  result = _primary()  (    < TIMES > value = _primary()    {      result *= value;    }  | < DIVIDE > value = _primary()    {      result /= value;    }  )*  {    return result;  }}/** parse the token string */double _primary() throws NumberFormatException, ParseException :{  Token tmpToken;  double value = 0.0;  Token sumB;  Token sumE;  int sumBV;  int sumEV;}{  (    tmpToken = < DOUBLE >  | tmpToken = < INTEGER >  )  {    value = Double.parseDouble(tmpToken.image);    return value;  }| < PREVIOUS > /** (1+2) \r $  == > 3 */  {    return previousValue;  }| < OPEN_PAR > value = _expression() < CLOSE_PAR > /** (1+2) = 3 */  {    return value;  }| < MINUS > value = _primary() /** -2 = -2 */  {    return - value;  }| < SUM > <OPEN_PAR > sumB = < INTEGER > < MIDDLE > sumE = < INTEGER > <CLOSE_PAR > /** sum(1..10) = 55 */  {    sumBV = Integer.parseInt(sumB.image);    sumEV = Integer.parseInt(sumE.image);    if (sumBV > sumEV) throw new ParseException("sum begin > end");    for (int i = sumBV; i <= sumEV; i++)    {      value += i;    }    return value;  }}