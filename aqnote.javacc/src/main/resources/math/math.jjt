options{  MULTI = true;  VISITOR = true; /*实现匹配的visitor模式代码*/  NODE_DEFAULT_VOID = true; /* 解析函数默认不生成node类*/}/*jtt 默认的生成node类名，都带AST前缀加上当前解析的语意的名称*/PARSER_BEGIN(eg4)class eg4{  public static void main(String args [])  {    System.out.println("Reading from standard input...");    eg4 t = new eg4(System.in);    try    {      ASTStart n = t.Start();      eg4Visitor v = new eg4DumpVisitor();      n.jjtAccept(v, null);      System.out.println("Thank you.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());      e.printStackTrace();    }  }}PARSER_END(eg4)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])? >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}ASTStart Start() #Start :{} /* #Start生成定义的节点类，名称为 前缀 ＋ Start.Java*/{  Expression() ";"  {    return jjtThis;  }}void Expression() :{}{  AdditiveExpression()}void AdditiveExpression() :{}{  (    MultiplicativeExpression()    (      (        "+"      | "-"      )      MultiplicativeExpression()    )*  ) #Add(>1) /* Add #  当满足条件(>1)，Add生成定义的节点类，名称为 前缀 ＋ Add.Java*/}void MultiplicativeExpression() :{}{  (    UnaryExpression()    (      (        "*"      | "/"      | "%"      )      UnaryExpression()    )*  ) #Mult(>1) /* # Mult 当满足条件(>1)，Mult生成定义的节点类，名称为 前缀 ＋ Mult.Java*/}void UnaryExpression() :{}{  "(" Expression() ")"| Identifier()| Integer()}void Identifier() #MyOtherID : /* # MyOtherID生成定义的节点类，名称为 前缀 ＋ MyOtherID.Java*/{  Token t;}{  t = < IDENTIFIER >  {    jjtThis.setName(t.image);  }}void Integer() #Integer :{} /* # Integer生成定义的节点类，名称为 前缀 ＋ Integer.Java*/{  < INTEGER_LITERAL >}